generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clerkId String @unique
  email   String @unique

  projects      Project[]
  countdowns    Countdown[]
  elasticHabits ElasticHabit[]
}

model Project {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  notes    Note[]
  sessions Session[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
}

model Note {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  header  String
  content String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
}

model Countdown {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name              String
  description       String? @db.Text
  // All times in minutes
  sessionTime       Int
  shortBreak        Int
  longBreak         Int?
  longBreakInterval Int?
  overtime          Int

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  session Session[]
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Timestamp when the session started
  start              DateTime
  // Timestamp when it should end, with stopwatch it will be the same as start
  stop               DateTime
  // When pausing calculate seconds passed and add them here
  accumulatedSeconds Int      @default(0)
  isPaused           Boolean  @default(false)
  isStopwatch        Boolean  @default(false)
  isOnGoing          Boolean  @default(true)
  isBreak            Boolean  @default(false)

  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  countdown   Countdown? @relation(fields: [countdownId], references: [id], onDelete: Cascade)
  countdownId String?
}

model ElasticHabit {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  levels       String[]
  // TODO: Should be templated
  // like I want to use a template of legendary so I create
  // an ElasticHabit with blank name and levels prefixed with trivial:, easy: etc.
  isTemplate   Boolean
  // We can't really do 180min of work without doing 90 min 
  // along the way
  isSequential Boolean
  // TODO: Dailies, weeklies etc.
  // schedule ?????
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
}
